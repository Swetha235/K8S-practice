
jenkins setup : 

sudo yum update â€“y
 
sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo	
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade
sudo dnf install java-17-amazon-corretto -y
sudo yum install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins	

------------------------------

DOCKER SETUP: 

sudo yum install docker -y
sudo systemctl start docker

sudo usermod -aG docker jenkins
sudo usermod -aG docker ec2-user

sudo systemctl restart docker
sudo chmod 666 /var/run/docker.sock

----------------------------

sonarqube setup:


docker run -itd --name sonar -p 9000:9000 sonarqube


generae sonar token :

sonar token:
squ_28a873bc93e432c6736cd53bada363b13290b4d3

----------------------------

aws configure 

swetha:
AccessKey
SecretAccesskey


-------------------------------

Installing kubectl  on linux machine :: 

kubectl & eksctl installation on aws linux machine 

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"


curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"


sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

============================================================

Installing eksctl   on linux machine :: 

eksctl version

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

sudo mv /tmp/eksctl /usr/local/bin


========================================================================

eksctl create cluster --name mcappcluster

or 

eksctl create cluster --name mcappcluster --nodegroup-name mcng --node-type t3.micro --nodes 8 --managed

===========================
JENKINS PLUGINS :

docker plugin 
pipeline stage view 
blue ocean 


==================================================================

dockerhub password  -->  secret text

---------------------------------------
git hub token ----> secret text

githubtoken creation:

click on Githubaccount ->select settings -> select developer setting(scroll down) -> click on personal access token -> select tokens with Classic --> on top left click on generate new token with classic --> enter name as githubtoken--> give all access --> click on generate token

===================================================

ARGO CD SETUP: 

kubectl create namespace argocd

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml


kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

kubectl get svc argocd-server -n argocd

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | 
base64 -d ; echo
